version: "3.7"

volumes:
  pg_data:
  cargo_cache:
  cargo_build_cache:

services:
  migration_runner:
    depends_on:
      pg:
        condition: service_healthy
    build:
      context: .
      dockerfile: DockerfileM

  pg:
    image: postgres:14.5
    ports:
      - "5432"
    volumes:
      - pg_data:/VAR/LIB/POSTGRESQL/DATA
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=diesel_demo
    # cpuset: "10-15"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  db-bench:
    depends_on:
      - migration_runner
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - DB_MODE=${DB_MODE}
        - SERVER_MODE=${SERVER_MODE}
        - DATABASE_URL=${DATABASE_URL}
    ports:
      - 8082:8080
      - 5555:5555
    volumes:
      - ./:/app
      - cargo_cache:/cargo_cache
      - cargo_build_cache:/cargo_build_cache
    # cpuset: "3"
    environment:
      - CARGO_TARGET_DIR=/cargo_build_cache
      - DATABASE_URL=postgres://postgres:postgres@pg/diesel_demo
    healthcheck:
      test: curl --fail http://localhost:8080 || exit 1
      interval: 15s
      retries: 5
      start_period: 5s
      timeout: 5s
  
  locust-master:
    image: locustio/locust
    ports:
     - "8089:8089"
    depends_on:
      db-bench:
        condition: service_healthy
    volumes:
      - ./:/mnt/locust
    command: -f /mnt/locust/locust_home.py --master -H http://locust-master:8089
    environment:
      - JTL_API_TOKEN=at-ed78f00c-a43d-48b8-bf2a-b616e53be118

  locust-worker:
    image: locustio/locust
    volumes:
      - ./:/mnt/locust
    command: -f /mnt/locust/locust_home.py --worker --master-host locust-master
    environment:
      - JTL_API_TOKEN=at-ed78f00c-a43d-48b8-bf2a-b616e53be118
    depends_on:
      - locust-master

  locust-exporter:
    image: containersol/locust_exporter
    ports:
        - "9646:9646"
    environment:
        - LOCUST_EXPORTER_URI=http://locust-master:8089
    depends_on:
        - locust-master
  
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
        - 9090:9090
    command:
        - --config.file=/etc/prometheus/prometheus.yml
    volumes:
        - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - cadvisor
  
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    restart: unless-stopped
    labels:
      container_group: monitoring
    # logging:
    #   driver: gelf
    #   options:
    #     gelf-address: udp://172.16.0.38:12201
    #     labels: container_group

    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/grafana-datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/grafana-dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.1
    container_name: cadvisor
    privileged: true
    ports:
    - 8080:8080
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock:rw
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    - /etc/machine-id:/etc/machine-id:ro
    - /var/lib/dbus/machine-id:/var/lib/dbus/machine-id:ro
    depends_on:
    - redis
  
  redis:
    image: redis:latest
    container_name: redis
    ports:
    - 6379:6379
  
  master-nodeexporter:
    image: prom/node-exporter:v0.14.0
    ports:
      - "9100:9100"
    restart: always
    labels:
      container_group: monitoring
    # logging:
    #   driver: gelf
    #   options:
    #     gelf-address: udp://172.16.0.38:12201
    #     labels: container_group

  fe:
    image: novyl/jtl-reporter-fe:v4.8.6
    ports:
     - "2020:80"
    depends_on:
      - db
      - be

  db:
    container_name: jtl-reporter-db
    build:
      context: ./jtl-reporter/db/
      dockerfile: Dockerfile
    volumes:
      - ./data/jtl_reporter_v4:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust

  be:
    image: novyl/jtl-reporter-be:v4.8.6
    ports:
      - "5002:5000"
    environment:
      - DB_HOST=db
      - JWT_TOKEN=27JU4qy73hchTMLoH8w9m
      - JWT_TOKEN_LOGIN=at-ed78f00c-a43d-48b8-bf2a-b616e53be118  # create a token from dashboard and configure here

  migration:
    image: novyl/jtl-reporter-be:v4.8.6
    environment:
        - DATABASE_URL=postgres://postgres@db/jtl_report
        - OPT_OUT_ANALYTICS=true
    command: npm run migrate up
    depends_on:
      db:
        condition: service_healthy

  listener:
    image: novyl/jtl-reporter-listener-service:v2.0.6
    ports:
      - "6000:6000"
    environment:
      - DB_HOST=db
      - JWT_TOKEN=at-ed78f00c-a43d-48b8-bf2a-b616e53be118 # paste the same token as in be service - JWT_TOKEN_LOGIN

  scheduler:
    image: novyl/jtl-reporter-scheduler:v0.0.4
    environment:
      - DB_HOST=db
